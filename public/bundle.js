(()=>{"use strict";var __webpack_modules__={911:()=>{eval('\n;// CONCATENATED MODULE: ./src/modules/Invoice.ts\nclass Invoice {\r\n    constructor(client, details, amount) {\r\n        this.client = client;\r\n        this.details = details;\r\n        this.amount = amount;\r\n    }\r\n    format() {\r\n        return `${this.client} owes $${this.amount} for ${this.details}!`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/modules/Payments.ts\nclass Payment {\r\n    // refractored constructor with types and access types\r\n    constructor(recipient, details, amount) {\r\n        this.recipient = recipient;\r\n        this.details = details;\r\n        this.amount = amount;\r\n    }\r\n    format() {\r\n        return `${this.recipient} is owed $${this.amount} for ${this.details}!`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/modules/ListTemplate.ts\nclass ListTemplate {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    render(item, heading, pos) {\r\n        const li = document.createElement("li");\r\n        const h4 = document.createElement("h4");\r\n        h4.innerText = heading;\r\n        li.appendChild(h4);\r\n        const p = document.createElement("p");\r\n        p.innerText = item.format();\r\n        li.appendChild(p);\r\n        if (pos === "start") {\r\n            this.container.prepend(li);\r\n        }\r\n        else {\r\n            this.container.append(li);\r\n        }\r\n    }\r\n}\r\n/*\r\n    1. register a list  container in the constructor\r\n    2. create a render mehtod to render a new li to the container\r\n        -- accepts arguments: invoice or payment, a heading, a position\r\n        -- create the html template (li, h4, p)\r\n        -- add the li template to the start/end of the list\r\n*/\r\n\n;// CONCATENATED MODULE: ./src/app.ts\n\r\n\r\n\r\n/*\r\n---------------------------------------------------------------------------------------\r\n\r\nNotes:\r\n\r\n    The DOM in TS:\r\n        - TS can\'t know if there is a DOM element on the page during development\r\n        - to avoid getting an error: document.querySelector("a")! => to say "I know this exists for sure" OR do an if check\r\n        - TS contains special types for DOM elements\r\n\r\n    Type casting:\r\n        - using class selectors TS only knows it is a DOM element, but not the exact type => *type casting* eg.: document.querySelector(".new-item-from") as HTMLFormElement; (! is not needed, it is not null)\r\n\r\n    Classes:\r\n        - can define a class with a constructor with defined parameter types\r\n        - can define an array type of the class ;)\r\n        - can edit object properties created from class, but can\'t change type\r\n        - can use *access modifyers* to limit access to these object properties: it actually works in TS, use the: public, private, readonly kws\r\n\r\n    Modules:\r\n        - TS uses ES6 modules\r\n        - only supported in modern browsers\r\n        - doesn\'t bundle our code, the browser uses the module system to load the files and makes multiple requests => use webpack to bundle\r\n        - TS modules compiles into JS ES6 module (use Webpack to work with older browser versions)\r\n\r\n    Interfaces:\r\n        - inforces a certain structure for objects and classes\r\n        - property names need to mach in type and name, mehtod parameters need to match in type only\r\n\r\n    Generics:\r\n        - reusable piece of code that can be used with different types\r\n        - with functions (eg: adding an id to an object) we use generics to "remember" the previous properties of the input opbject by adding <T extends *type*>(obj: T) => {} to the function\r\n        - with interfaces we use generics to keep a property type flexible, but when using this interface we neet to define the type eg: interface Resource<T> = {... data: T} AND doc:Resource<string[]>{...data: ["a", "b"]}\r\n\r\n    ENUMS:\r\n        - ENUMs are a special type in TS that allows to store a set constants (keywords) and associate them witha numeric value eg: use ENUMs to mark the different kinds of objects created using the same interface which takes a generic type as one of it\'s properties\r\n    \r\n    Tuples:\r\n        - a type in TS, similar to arrays\r\n        - arrays are still quite flexible even when typed, because the position of each type can be changed: not with tuples\r\n        - define by defining the types in the array: [string, number, boolean]\r\n\r\n\r\n---------------------------------------------------------------------------------------\r\n\r\n*/\r\n// applying interfaces\r\n// let docOne: HasFormatter;\r\n// let docTwo: HasFormatter;\r\n// docOne = new Invoice("yoshi", "web work", 250);\r\n// docTwo = new Payment("mario", "plumbing work", 200);\r\n// let docs: HasFormatter[] = [];\r\n// docs.push(docOne);\r\n// docs.push(docTwo);\r\n// console.log(docs);\r\n// const anchor = document.querySelector("a")!;\r\n// console.log(anchor.href);\r\n// classes\r\n// refractored into invoice.ts\r\n// class Invoice {\r\n//   readonly client: string;\r\n//   details: string;\r\n//   private amount: number;\r\n//   constructor(c: string, d: string, a: number) {\r\n//     this.client = c;\r\n//     this.details = d;\r\n//     this.amount = a;\r\n//   }\r\n//   format() {\r\n//     return `${this.client} owes $${this.amount} for ${this.details}`;\r\n//   }\r\n// }\r\n// -----------------------------------------------------------------------\r\n// from\r\nconst app_form = document.querySelector(".new-item-from");\r\n// inputs\r\nconst type = document.querySelector("#type");\r\nconst toFrom = document.querySelector("#toFrom");\r\nconst details = document.querySelector("#details");\r\nconst amount = document.querySelector("#amount");\r\n// list template instance\r\nconst ul = document.querySelector(".item-list");\r\nconst list = new ListTemplate(ul);\r\n// form event listener\r\napp_form.addEventListener("submit", (e) => {\r\n    e.preventDefault();\r\n    let values;\r\n    values = [toFrom.value, details.value, amount.valueAsNumber];\r\n    let doc;\r\n    if (type.value === "invoice") {\r\n        doc = new Invoice(...values);\r\n    }\r\n    else {\r\n        doc = new Payment(...values);\r\n    }\r\n    list.render(doc, type.value, "end");\r\n});\r\n// -----------------------------------------------------------------------\r\n// const inv1 = new Invoice("mario", "work on the mario website", 50);\r\n// const inv2 = new Invoice("luigi", "work on the luigi website", 300);\r\n// let invoices: Invoice[] = [];\r\n// invoices.push(inv1);\r\n// invoices.push(inv2);\r\n// invoices.forEach((inv) => {\r\n//   console.log(inv.client, inv.details, inv.format());\r\n// });\r\n// // SHORTHAND CLASS WITH ACCESS MODIFYERS -------------------------------------------------\r\n// class InvoicesEg {\r\n//   constructor(\r\n//     readonly client: string,\r\n//     readonly details: string,\r\n//     private amount: number\r\n//   ) {\r\n//     this.client = client;\r\n//     this.details = details;\r\n//     this.amount = amount;\r\n//   }\r\n//   format() {\r\n//     return `${this.client} owes $${this.amount} for ${this.details}`;\r\n//   }\r\n// }\r\n// const invEg = new InvoicesEg("diana", "project fee", 100);\r\n// console.log(invEg.format());\r\n// interfaces: object interfaces\r\n// interface isPerson {\r\n//   name: string;\r\n//   age: number;\r\n//   birthYear: number;\r\n//   location: string;\r\n//   speak: (a: string) => void;\r\n//   spend: (a: number) => number;\r\n// }\r\n// const me: isPerson = {\r\n//   name: "Diana",\r\n//   age: 24,\r\n//   birthYear: 1997,\r\n//   location: "Almere",\r\n//   speak: (text: string): void => {\r\n//     console.log(`${text}`);\r\n//   },\r\n//   spend: (amount: number): number => {\r\n//     console.log(`Spent ${amount}`);\r\n//     return amount;\r\n//   },\r\n// };\r\n// let someone: isPerson;\r\n// console.log(me);\r\n// me.speak(`hello there`);\r\n// me.spend(500);\r\n// const greetPerson = (person: isPerson) => {\r\n//   console.log(`Hello, ${person.name}`);\r\n// };\r\n// greetPerson(me);\r\n// someone = {\r\n//   name: "someone",\r\n//   age: 20,\r\n//   birthYear: 2001,\r\n//   location: "Den Haag",\r\n//   speak: (text: string): void => {\r\n//     console.log(`${text}`);\r\n//   },\r\n//   spend: (amount: number): number => {\r\n//     console.log(`Spent ${amount}`);\r\n//     return amount;\r\n//   },\r\n// };\r\n// greetPerson(someone);\r\n// someone.spend(500);\r\n// // generics in functions\r\n// const addUID = <T extends object>(obj: T) => {\r\n//   let uid = Math.floor(Math.random() * 100);\r\n//   return { ...obj, uid };\r\n// };\r\n// let test = addUID({ name: "Yoshi" });\r\n// // doesn\'t know  the other properties than uid\r\n// // placing <T>(obj: T) captures the unknown object properties => but doesn\'t capture the type of the input iteself, but the properties of it\r\n// // adding <T extends {name: string}> (obj: T) specifies the type (object) and a property name and type (name:string) to make it a specific type again\r\n// console.log(test.name);\r\n// //  generics in interfaces\r\n// interface Resource<T> {\r\n//   uid: number;\r\n//   resourceName: string;\r\n//   // data is flexible => generic\r\n//   data: T;\r\n// }\r\n// // have to pass in te type of the generic T in the interface\r\n// const docThree: Resource<string> = {\r\n//   uid: 200,\r\n//   resourceName: "person",\r\n//   data: "this is a string",\r\n// };\r\n// const docFour: Resource<string[]> = {\r\n//   uid: 4,\r\n//   resourceName: "shopping list",\r\n//   data: ["dogfood", "hay"],\r\n// };\r\n// console.log(docThree);\r\n// console.log(docFour);\r\n// ENUMS in TS\r\n//all numbers accesible on ResourceType object, associates with a number\r\n// enum ResourceType {\r\n//   BOOK,\r\n//   AUTHOR,\r\n//   FILM,\r\n//   DIRECTOR,\r\n//   PERSON,\r\n// }\r\n// interface Resource<T> {\r\n//   uid: number;\r\n//   resourceType: ResourceType;\r\n//   data: T;\r\n// }\r\n// const docFive: Resource<string> = {\r\n//   uid: 4,\r\n//   resourceType: ResourceType.AUTHOR,\r\n//   data: "John Miller",\r\n// };\r\n// console.log(docFive);\r\n// Tuple type in TS\r\n// arrays are quite flexible even when typed, the position of the type can change\r\n// let arr = ["ryu", 25, true];\r\n// arr[0] = false;\r\n// arr[1] = "yoshi";\r\n// arr = ["hi", 10, true];\r\n// //  with tuples the position of the types can\'t be changed\r\n// let tup: [string, number, boolean] = ["hi", 200, true];\r\n// let student: [string, number];\r\n// student = ["chin-li", 57677];\r\n// // nope!\r\n// // student = [57677, "chin-li"];\r\nconsole.error("ERR: locating error using source maps :)");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///911\n')}},__webpack_exports__={};__webpack_modules__[911]()})();